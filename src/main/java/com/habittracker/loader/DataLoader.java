package com.habittracker.loader;

import com.habittracker.entity.*;
import com.habittracker.repository.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

@Component
@Order(1)
@Slf4j
public class DataLoader implements CommandLineRunner {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private HabitRepository habitRepository;

    @Autowired
    private ProgressRepository progressRepository;

    @Autowired
    private AchievementRepository achievementRepository;

    // ‚úÖ Injection du PasswordEncoder pour hacher les mots de passe
    @Autowired
    private PasswordEncoder passwordEncoder;

    private final Random random = new Random();

    @Override
    public void run(String... args) throws Exception {

        if (userRepository.count() > 0) {
            log.info("üîÑ Donn√©es existantes d√©tect√©es, chargement ignor√©");
            return;
        }

        log.info("üöÄ D√©marrage du chargement des donn√©es de test...");

        List<User> users = createUsers();
        List<Habit> habits = createHabits(users);
        createProgress(users, habits);
        createAchievements(users);

        log.info("‚úÖ Chargement termin√© avec succ√®s !");
        logStatistics();
    }

    private List<User> createUsers() {
        log.info("üë• Cr√©ation des utilisateurs avec mots de passe s√©curis√©s...");

        List<User> users = new ArrayList<>();

        // ‚úÖ Mots de passe hach√©s avec BCrypt
        String adminPassword = passwordEncoder.encode("admin123");
        String userPassword = passwordEncoder.encode("password123");

        // Admin
        User admin = new User("admin", "admin@habittracker.com", adminPassword);
        admin.setFirstName("Admin");
        admin.setLastName("System");
        admin.setRole(User.Role.ADMIN);
        users.add(admin);

        // Utilisateurs test
        User john = new User("john_doe", "john@example.com", userPassword);
        john.setFirstName("John");
        john.setLastName("Doe");
        users.add(john);

        User marie = new User("marie_martin", "marie@example.com", userPassword);
        marie.setFirstName("Marie");
        marie.setLastName("Martin");
        users.add(marie);

        User pierre = new User("pierre_durand", "pierre@example.com", userPassword);
        pierre.setFirstName("Pierre");
        pierre.setLastName("Durand");
        users.add(pierre);

        User sophie = new User("sophie_blanc", "sophie@example.com", userPassword);
        sophie.setFirstName("Sophie");
        sophie.setLastName("Blanc");
        users.add(sophie);

        List<User> savedUsers = userRepository.saveAll(users);
        log.info("‚úÖ {} utilisateurs cr√©√©s avec mots de passe BCrypt", savedUsers.size());
        log.info("üîê Connexion: admin/admin123 ou john_doe/password123");

        return savedUsers;
    }

    /**
     * Cr√©ation des habitudes d'exemple
     */
    private List<Habit> createHabits(List<User> users) {
        log.info("üéØ Cr√©ation des habitudes...");

        List<Habit> habits = new ArrayList<>();

        for (User user : users) {
            if (user.getRole() == User.Role.ADMIN) continue; // Skip admin

            // Habitudes sport
            habits.add(createHabit(user.getId(), "Course matinale", "Courir 30 minutes chaque matin",
                    Habit.Category.SPORT, "minutes", Habit.Frequency.DAILY, 30.0));

            habits.add(createHabit(user.getId(), "Musculation", "S√©ance de musculation",
                    Habit.Category.SPORT, "s√©ances", Habit.Frequency.WEEKLY, 3.0));

            // Habitudes sant√©
            habits.add(createHabit(user.getId(), "Boire de l'eau", "Boire suffisamment d'eau",
                    Habit.Category.SANTE, "litres", Habit.Frequency.DAILY, 2.0));

            habits.add(createHabit(user.getId(), "M√©ditation", "M√©ditation quotidienne",
                    Habit.Category.SANTE, "minutes", Habit.Frequency.DAILY, 10.0));

            // Habitudes √©ducation
            habits.add(createHabit(user.getId(), "Lecture", "Lire des livres",
                    Habit.Category.EDUCATION, "pages", Habit.Frequency.DAILY, 20.0));

            habits.add(createHabit(user.getId(), "Apprentissage langue", "Pratiquer l'anglais",
                    Habit.Category.EDUCATION, "minutes", Habit.Frequency.DAILY, 15.0));

            // Habitudes lifestyle
            habits.add(createHabit(user.getId(), "Coucher t√¥t", "Se coucher avant 23h",
                    Habit.Category.LIFESTYLE, "fois", Habit.Frequency.DAILY, 1.0));

            habits.add(createHabit(user.getId(), "Ranger bureau", "Maintenir un espace de travail propre",
                    Habit.Category.TRAVAIL, "fois", Habit.Frequency.WEEKLY, 2.0));
        }

        List<Habit> savedHabits = habitRepository.saveAll(habits);
        log.info("‚úÖ {} habitudes cr√©√©es", savedHabits.size());

        return savedHabits;
    }

    private Habit createHabit(Long userId, String title, String description,
                              Habit.Category category, String unit,
                              Habit.Frequency frequency, Double targetValue) {
        Habit habit = new Habit(userId, title, category, unit, frequency);
        habit.setDescription(description);
        habit.setTargetValue(targetValue);
        return habit;
    }

    /**
     * Cr√©ation des progressions sur 30 jours
     */
    private void createProgress(List<User> users, List<Habit> habits) {
        log.info("üìà Cr√©ation des progressions...");

        List<Progress> progressList = new ArrayList<>();
        LocalDate today = LocalDate.now();

        for (Habit habit : habits) {
            // Simule 30 jours de progression avec variation r√©aliste
            for (int dayOffset = 29; dayOffset >= 0; dayOffset--) {
                LocalDate progressDate = today.minusDays(dayOffset);

                // Probabilit√© de progression (80% de chance)
                if (random.nextDouble() < 0.8) {
                    Double value = generateRealisticValue(habit);
                    String note = generateRandomNote();

                    Progress progress = new Progress(habit.getUserId(), habit.getId(), progressDate, value);
                    if (random.nextDouble() < 0.3) { // 30% de chance d'avoir une note
                        progress.setNote(note);
                    }

                    progressList.add(progress);
                }
            }
        }

        List<Progress> savedProgress = progressRepository.saveAll(progressList);
        log.info("‚úÖ {} entr√©es de progression cr√©√©es", savedProgress.size());
    }

    /**
     * G√©n√®re une valeur r√©aliste selon le type d'habitude
     */
    private Double generateRealisticValue(Habit habit) {
        Double target = habit.getTargetValue();
        if (target == null) target = 1.0;

        // Variation entre 50% et 120% de l'objectif
        double variation = 0.5 + (random.nextDouble() * 0.7);
        double value = target * variation;

        // Arrondi selon l'unit√©
        if ("minutes".equals(habit.getUnit()) || "pages".equals(habit.getUnit())) {
            return (double) Math.round(value);
        } else if ("litres".equals(habit.getUnit())) {
            return Math.round(value * 10.0) / 10.0; // 1 d√©cimale
        } else {
            return (double) Math.round(value);
        }
    }

    /**
     * G√©n√®re des notes al√©atoires r√©alistes
     */
    private String generateRandomNote() {
        String[] notes = {
                "Excellent aujourd'hui !",
                "Pas facile mais j'ai tenu",
                "Tr√®s motiv√© ce matin",
                "Un peu fatigu√© mais j'ai fait l'effort",
                "Belle progression",
                "J'ai d√©pass√© mon objectif !",
                "Bonne s√©ance",
                "Il faut que je m'am√©liore",
                "Parfait timing",
                "Content de moi"
        };
        return notes[random.nextInt(notes.length)];
    }

    /**
     * Cr√©ation des badges d'exemple
     */
    private void createAchievements(List<User> users) {
        log.info("üèÜ Cr√©ation des achievements...");

        List<Achievement> achievements = new ArrayList<>();

        for (User user : users) {
            if (user.getRole() == User.Role.ADMIN) continue;

            // Premiers badges pour tous
            achievements.add(createAchievement(user.getId(), "Bienvenue !",
                    "Premier objectif cr√©√©", "üéâ", Achievement.AchievementType.MILESTONE));

            achievements.add(createAchievement(user.getId(), "Premier pas",
                    "Premi√®re progression enregistr√©e", "üëü", Achievement.AchievementType.MILESTONE));

            // Badges de r√©gularit√© (al√©atoire)
            if (random.nextDouble() < 0.7) {
                achievements.add(createAchievement(user.getId(), "R√©gularit√©",
                        "7 jours cons√©cutifs", "üî•", Achievement.AchievementType.CONSISTENCY));
            }

            if (random.nextDouble() < 0.4) {
                achievements.add(createAchievement(user.getId(), "S√©rie impressionnante",
                        "15 jours cons√©cutifs", "‚ö°", Achievement.AchievementType.STREAK));
            }

            // Badges de d√©passement
            if (random.nextDouble() < 0.5) {
                achievements.add(createAchievement(user.getId(), "Surpassement",
                        "Objectif d√©pass√© de 20%", "üöÄ", Achievement.AchievementType.OVERACHIEVER));
            }

            // Badges de vari√©t√©
            if (random.nextDouble() < 0.6) {
                achievements.add(createAchievement(user.getId(), "Polyvalent",
                        "3 cat√©gories diff√©rentes", "üåà", Achievement.AchievementType.VARIETY));
            }
        }

        List<Achievement> savedAchievements = achievementRepository.saveAll(achievements);
        log.info("‚úÖ {} achievements cr√©√©s", savedAchievements.size());
    }

    private Achievement createAchievement(Long userId, String name, String description,
                                          String icon, Achievement.AchievementType type) {
        Achievement achievement = new Achievement(userId, name, description, icon, type);
        // Date al√©atoire dans les 30 derniers jours
        LocalDateTime unlockedAt = LocalDateTime.now().minusDays(random.nextInt(30));
        achievement.setUnlockedAt(unlockedAt);
        return achievement;
    }

    /**
     * Affiche les statistiques de chargement
     */
    private void logStatistics() {
        log.info("üìä === STATISTIQUES DES DONN√âES CHARG√âES ===");
        log.info("üë• Utilisateurs : {}", userRepository.count());
        log.info("üéØ Habitudes : {}", habitRepository.count());
        log.info("üìà Progressions : {}", progressRepository.count());
        log.info("üèÜ Achievements : {}", achievementRepository.count());
        log.info("================================================");

        // Statistiques par utilisateur
        List<User> users = userRepository.findAll();
        for (User user : users) {
            if (user.getRole() == User.Role.ADMIN) continue;

            long userHabits = habitRepository.countByUserIdAndIsActive(user.getId(), true);
            long userProgress = progressRepository.countByUserId(user.getId());
            long userAchievements = achievementRepository.countByUserId(user.getId());

            log.info("üë§ {} : {} habitudes, {} progressions, {} badges",
                    user.getUsername(), userHabits, userProgress, userAchievements);
        }
    }
}