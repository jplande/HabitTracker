package com.habittracker.loader;

import com.habittracker.entity.*;
import com.habittracker.repository.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

@Component
@Order(1)
@Slf4j
public class DataLoader implements CommandLineRunner {

    @Autowired private UserRepository userRepository;
    @Autowired private HabitRepository habitRepository;
    @Autowired private ProgressRepository progressRepository;
    @Autowired private AchievementRepository achievementRepository;
    @Autowired private PasswordEncoder passwordEncoder;

    private final Random random = new Random(42); // Seed fixe pour reproductibilit√©

    @Override
    public void run(String... args) throws Exception {
        if (userRepository.count() > 0) {
            log.info("üîÑ Donn√©es existantes d√©tect√©es, chargement ignor√©");
            return;
        }

        log.info("üöÄ === CR√âATION JEU DE DONN√âES COMPLET ===");

        List<User> users = createDiverseUsers();
        List<Habit> habits = createVariedHabits(users);
        createRealisticProgress(users, habits);
        createMeaningfulAchievements(users);

        logDetailedStatistics();
        log.info("‚úÖ === CHARGEMENT TERMIN√â AVEC SUCC√àS ===");
    }

    // =====================================================================
    // √âTAPE 1 : CR√âATION D'UTILISATEURS DIVERSIFI√âS
    // =====================================================================

    private List<User> createDiverseUsers() {
        log.info("üë• Cr√©ation d'utilisateurs diversifi√©s...");

        List<User> users = new ArrayList<>();
        String password = passwordEncoder.encode("password123");

        // 1. Admin principal
        users.add(createUser("admin", "admin@habittracker.com",
                passwordEncoder.encode("admin123"), "Admin", "System",
                User.Role.ADMIN, true, 180)); // 6 mois

        // 2. Utilisateurs actifs avec diff√©rentes anciennet√©s
        users.add(createUser("marie_champion", "marie@example.com", password,
                "Marie", "Champion", User.Role.USER, true, 150)); // 5 mois - tr√®s active

        users.add(createUser("paul_regulier", "paul@example.com", password,
                "Paul", "R√©gulier", User.Role.USER, true, 90)); // 3 mois - r√©gulier

        users.add(createUser("alice_novice", "alice@example.com", password,
                "Alice", "Novice", User.Role.USER, true, 30)); // 1 mois - d√©butante

        users.add(createUser("tom_sportif", "tom@example.com", password,
                "Tom", "Sportif", User.Role.USER, true, 120)); // 4 mois - focus sport

        users.add(createUser("emma_studieuse", "emma@example.com", password,
                "Emma", "Studieuse", User.Role.USER, true, 75)); // 2.5 mois - focus √©ducation

        // 3. Utilisateurs moins actifs
        users.add(createUser("jules_intermittent", "jules@example.com", password,
                "Jules", "Intermittent", User.Role.USER, true, 60)); // 2 mois - irr√©gulier

        // 4. Utilisateurs inactifs (max 4 comme demand√©)
        users.add(createUser("sarah_inactive", "sarah@example.com", password,
                "Sarah", "Inactive", User.Role.USER, false, 200)); // Ancienne, d√©sactiv√©e

        users.add(createUser("alex_abandonne", "alex@example.com", password,
                "Alex", "Abandonn√©", User.Role.USER, false, 100)); // A abandonn√© r√©cemment

        users.add(createUser("lucas_suspendu", "lucas@example.com", password,
                "Lucas", "Suspendu", User.Role.USER, false, 45)); // Suspendu temporairement

        users.add(createUser("lisa_teste", "lisa@example.com", password,
                "Lisa", "Test", User.Role.USER, false, 10)); // Compte de test inactif

        List<User> savedUsers = userRepository.saveAll(users);

        log.info("‚úÖ {} utilisateurs cr√©√©s :", savedUsers.size());
        savedUsers.forEach(user -> log.info("   üë§ {} ({}) - {} - Inscrit il y a {} jours",
                user.getUsername(),
                user.getRole(),
                user.getIsActive() ? "Actif" : "Inactif",
                java.time.temporal.ChronoUnit.DAYS.between(user.getCreatedAt().toLocalDate(), LocalDate.now())
        ));

        return savedUsers;
    }

    private User createUser(String username, String email, String password,
                            String firstName, String lastName, User.Role role,
                            boolean isActive, int daysAgo) {

        User user = new User(username, email, password);
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setRole(role);
        user.setIsActive(isActive);

        // D√©finir date de cr√©ation personnalis√©e
        LocalDateTime createdAt = LocalDateTime.now().minusDays(daysAgo);
        user.setCreatedAt(createdAt);

        return user;
    }

    // =====================================================================
    // √âTAPE 2 : CR√âATION D'HABITUDES VARI√âES PAR PROFIL
    // =====================================================================

    private List<Habit> createVariedHabits(List<User> users) {
        log.info("üéØ Cr√©ation d'habitudes vari√©es par profil...");

        List<Habit> allHabits = new ArrayList<>();

        for (User user : users) {
            if (user.getRole() == User.Role.ADMIN) continue; // Skip admin

            List<Habit> userHabits = switch (user.getUsername()) {
                case "marie_champion" -> createChampionHabits(user.getId());
                case "paul_regulier" -> createRegularHabits(user.getId());
                case "alice_novice" -> createNoviceHabits(user.getId());
                case "tom_sportif" -> createSportHabits(user.getId());
                case "emma_studieuse" -> createStudyHabits(user.getId());
                case "jules_intermittent" -> createIntermittentHabits(user.getId());
                default -> createInactiveHabits(user.getId()); // Pour les comptes inactifs
            };

            allHabits.addAll(userHabits);
        }

        List<Habit> savedHabits = habitRepository.saveAll(allHabits);

        log.info("‚úÖ {} habitudes cr√©√©es :", savedHabits.size());
        users.forEach(user -> {
            if (user.getRole() != User.Role.ADMIN) {
                long userHabitCount = savedHabits.stream()
                        .filter(h -> h.getUserId().equals(user.getId()))
                        .count();
                log.info("   üéØ {} : {} habitudes", user.getUsername(), userHabitCount);
            }
        });

        return savedHabits;
    }

    // === PROFILS D'HABITUDES ===

    private List<Habit> createChampionHabits(Long userId) {
        return List.of(
                // Sport (tr√®s active)
                createHabit(userId, "Course matinale", "Running 5km chaque matin",
                        Habit.Category.SPORT, "km", Habit.Frequency.DAILY, 5.0),
                createHabit(userId, "Musculation", "S√©ances de renforcement",
                        Habit.Category.SPORT, "s√©ances", Habit.Frequency.WEEKLY, 4.0),
                createHabit(userId, "Yoga", "S√©ance de yoga relaxante",
                        Habit.Category.SANTE, "minutes", Habit.Frequency.DAILY, 30.0),

                // Sant√© & Bien-√™tre
                createHabit(userId, "M√©ditation", "Pleine conscience quotidienne",
                        Habit.Category.SANTE, "minutes", Habit.Frequency.DAILY, 15.0),
                createHabit(userId, "Hydratation", "Consommation d'eau optimale",
                        Habit.Category.SANTE, "litres", Habit.Frequency.DAILY, 2.5),

                // D√©veloppement personnel
                createHabit(userId, "Lecture", "Lecture de d√©veloppement personnel",
                        Habit.Category.EDUCATION, "pages", Habit.Frequency.DAILY, 25.0),
                createHabit(userId, "Journaling", "√âcriture quotidienne",
                        Habit.Category.LIFESTYLE, "pages", Habit.Frequency.DAILY, 2.0),

                // Productivit√©
                createHabit(userId, "R√©vision objectifs", "Point hebdomadaire",
                        Habit.Category.TRAVAIL, "sessions", Habit.Frequency.WEEKLY, 1.0)
        );
    }

    private List<Habit> createRegularHabits(Long userId) {
        return List.of(
                createHabit(userId, "Marche quotidienne", "30 minutes de marche",
                        Habit.Category.SPORT, "minutes", Habit.Frequency.DAILY, 30.0),
                createHabit(userId, "Lecture", "Lecture avant coucher",
                        Habit.Category.EDUCATION, "pages", Habit.Frequency.DAILY, 15.0),
                createHabit(userId, "Eau", "Hydratation r√©guli√®re",
                        Habit.Category.SANTE, "verres", Habit.Frequency.DAILY, 8.0),
                createHabit(userId, "Coucher t√¥t", "Se coucher avant 23h",
                        Habit.Category.LIFESTYLE, "fois", Habit.Frequency.DAILY, 1.0),
                createHabit(userId, "Rangement bureau", "Workspace propre",
                        Habit.Category.TRAVAIL, "fois", Habit.Frequency.WEEKLY, 2.0)
        );
    }

    private List<Habit> createNoviceHabits(Long userId) {
        return List.of(
                createHabit(userId, "Marche", "Premiers pas vers le sport",
                        Habit.Category.SPORT, "minutes", Habit.Frequency.DAILY, 20.0),
                createHabit(userId, "Boire plus d'eau", "Am√©liorer hydratation",
                        Habit.Category.SANTE, "verres", Habit.Frequency.DAILY, 6.0),
                createHabit(userId, "Lire 10 min", "Reprendre la lecture",
                        Habit.Category.EDUCATION, "minutes", Habit.Frequency.DAILY, 10.0)
        );
    }

    private List<Habit> createSportHabits(Long userId) {
        return List.of(
                createHabit(userId, "Running", "Course d'endurance",
                        Habit.Category.SPORT, "km", Habit.Frequency.DAILY, 7.0),
                createHabit(userId, "Musculation", "Programme complet",
                        Habit.Category.SPORT, "s√©ances", Habit.Frequency.WEEKLY, 5.0),
                createHabit(userId, "Natation", "Entra√Ænement aquatique",
                        Habit.Category.SPORT, "longueurs", Habit.Frequency.WEEKLY, 50.0),
                createHabit(userId, "√âtirements", "R√©cup√©ration active",
                        Habit.Category.SANTE, "minutes", Habit.Frequency.DAILY, 20.0),
                createHabit(userId, "Prot√©ines", "Nutrition sportive",
                        Habit.Category.SANTE, "portions", Habit.Frequency.DAILY, 3.0),
                createHabit(userId, "Sommeil", "R√©cup√©ration optimale",
                        Habit.Category.LIFESTYLE, "heures", Habit.Frequency.DAILY, 8.0)
        );
    }

    private List<Habit> createStudyHabits(Long userId) {
        return List.of(
                createHabit(userId, "√âtude langues", "Apprentissage anglais",
                        Habit.Category.EDUCATION, "minutes", Habit.Frequency.DAILY, 45.0),
                createHabit(userId, "Lecture technique", "Veille technologique",
                        Habit.Category.EDUCATION, "articles", Habit.Frequency.DAILY, 3.0),
                createHabit(userId, "Code practice", "Exercices de programmation",
                        Habit.Category.EDUCATION, "exercices", Habit.Frequency.DAILY, 5.0),
                createHabit(userId, "Podcasts", "√âcoute √©ducative",
                        Habit.Category.EDUCATION, "√©pisodes", Habit.Frequency.DAILY, 1.0),
                createHabit(userId, "Notes", "Synth√®se apprentissages",
                        Habit.Category.TRAVAIL, "pages", Habit.Frequency.DAILY, 2.0)
        );
    }

    private List<Habit> createIntermittentHabits(Long userId) {
        return List.of(
                createHabit(userId, "Sport parfois", "Activit√© sporadique",
                        Habit.Category.SPORT, "sessions", Habit.Frequency.WEEKLY, 2.0),
                createHabit(userId, "Lecture", "Lecture irr√©guli√®re",
                        Habit.Category.EDUCATION, "pages", Habit.Frequency.DAILY, 10.0),
                createHabit(userId, "M√©ditation", "Tentatives de m√©ditation",
                        Habit.Category.SANTE, "minutes", Habit.Frequency.DAILY, 5.0)
        );
    }

    private List<Habit> createInactiveHabits(Long userId) {
        return List.of(
                createHabitInactive(userId, "Objectif abandonn√©", "Habitude non suivie",
                        Habit.Category.SPORT, "fois", Habit.Frequency.DAILY, 1.0),
                createHabitInactive(userId, "Projet suspendu", "En pause",
                        Habit.Category.EDUCATION, "heures", Habit.Frequency.WEEKLY, 5.0)
        );
    }

    private Habit createHabit(Long userId, String title, String description,
                              Habit.Category category, String unit,
                              Habit.Frequency frequency, Double targetValue) {
        Habit habit = new Habit(userId, title, category, unit, frequency);
        habit.setDescription(description);
        habit.setTargetValue(targetValue);
        habit.setIsActive(true);
        return habit;
    }

    private Habit createHabitInactive(Long userId, String title, String description,
                                      Habit.Category category, String unit,
                                      Habit.Frequency frequency, Double targetValue) {
        Habit habit = createHabit(userId, title, description, category, unit, frequency, targetValue);
        habit.setIsActive(false);
        return habit;
    }

    // =====================================================================
    // √âTAPE 3 : CR√âATION DE PROGRESSIONS R√âALISTES
    // =====================================================================

    private void createRealisticProgress(List<User> users, List<Habit> habits) {
        log.info("üìà Cr√©ation de progressions r√©alistes...");

        List<Progress> allProgress = new ArrayList<>();

        for (User user : users) {
            if (user.getRole() == User.Role.ADMIN || !user.getIsActive()) {
                continue; // Skip admin et inactifs
            }

            List<Habit> userHabits = habits.stream()
                    .filter(h -> h.getUserId().equals(user.getId()) && h.getIsActive())
                    .toList();

            List<Progress> userProgress = switch (user.getUsername()) {
                case "marie_champion" -> createChampionProgress(user, userHabits);
                case "paul_regulier" -> createRegularProgress(user, userHabits);
                case "alice_novice" -> createNoviceProgress(user, userHabits);
                case "tom_sportif" -> createSportProgress(user, userHabits);
                case "emma_studieuse" -> createStudyProgress(user, userHabits);
                case "jules_intermittent" -> createIntermittentProgress(user, userHabits);
                default -> new ArrayList<>();
            };

            allProgress.addAll(userProgress);
        }

        List<Progress> savedProgress = progressRepository.saveAll(allProgress);

        log.info("‚úÖ {} progressions cr√©√©es :", savedProgress.size());
        users.forEach(user -> {
            if (user.getRole() != User.Role.ADMIN && user.getIsActive()) {
                long userProgressCount = savedProgress.stream()
                        .filter(p -> p.getUserId().equals(user.getId()))
                        .count();
                log.info("   üìà {} : {} progressions", user.getUsername(), userProgressCount);
            }
        });
    }

    // === PATTERNS DE PROGRESSION ===

    private List<Progress> createChampionProgress(User user, List<Habit> habits) {
        List<Progress> progressList = new ArrayList<>();
        int daysOfActivity = 140; // Tr√®s active depuis longtemps

        for (Habit habit : habits) {
            // 95% de r√©gularit√©
            for (int dayOffset = daysOfActivity; dayOffset >= 0; dayOffset--) {
                if (random.nextDouble() < 0.95) { // Tr√®s r√©guli√®re
                    LocalDate date = LocalDate.now().minusDays(dayOffset);
                    Double value = generateChampionValue(habit, dayOffset, daysOfActivity);
                    String note = dayOffset < 7 ? generateMotivationalNote() : null;

                    progressList.add(createProgress(user.getId(), habit.getId(), date, value, note));
                }
            }
        }
        return progressList;
    }

    private List<Progress> createRegularProgress(User user, List<Habit> habits) {
        List<Progress> progressList = new ArrayList<>();
        int daysOfActivity = 80;

        for (Habit habit : habits) {
            // 75% de r√©gularit√© avec pattern week-end plus faible
            for (int dayOffset = daysOfActivity; dayOffset >= 0; dayOffset--) {
                LocalDate date = LocalDate.now().minusDays(dayOffset);
                boolean isWeekend = date.getDayOfWeek().getValue() >= 6;

                double consistency = isWeekend ? 0.6 : 0.8; // Moins r√©gulier le week-end

                if (random.nextDouble() < consistency) {
                    Double value = generateRegularValue(habit);
                    progressList.add(createProgress(user.getId(), habit.getId(), date, value, null));
                }
            }
        }
        return progressList;
    }

    private List<Progress> createNoviceProgress(User user, List<Habit> habits) {
        List<Progress> progressList = new ArrayList<>();
        int daysOfActivity = 25; // Nouvelle utilisatrice

        for (Habit habit : habits) {
            // Pattern d√©butant : start faible, puis am√©lioration
            for (int dayOffset = daysOfActivity; dayOffset >= 0; dayOffset--) {
                LocalDate date = LocalDate.now().minusDays(dayOffset);

                // Am√©lioration de la consistance au fil du temps
                double baseConsistency = 0.3 + (0.4 * (daysOfActivity - dayOffset) / daysOfActivity);

                if (random.nextDouble() < baseConsistency) {
                    Double value = generateNoviceValue(habit, dayOffset, daysOfActivity);
                    String note = dayOffset < 5 ? generateBeginnerNote() : null;

                    progressList.add(createProgress(user.getId(), habit.getId(), date, value, note));
                }
            }
        }
        return progressList;
    }

    private List<Progress> createSportProgress(User user, List<Habit> habits) {
        List<Progress> progressList = new ArrayList<>();
        int daysOfActivity = 110;

        for (Habit habit : habits) {
            // Pattern sportif : tr√®s r√©gulier avec pics et r√©cup√©ration
            for (int dayOffset = daysOfActivity; dayOffset >= 0; dayOffset--) {
                LocalDate date = LocalDate.now().minusDays(dayOffset);

                // Cycle d'entra√Ænement : 6 jours actifs, 1 jour repos
                boolean isRestDay = (dayOffset % 7) == 0;
                double consistency = isRestDay ? 0.3 : 0.9;

                if (random.nextDouble() < consistency) {
                    Double value = generateSportValue(habit, dayOffset);
                    String note = generateSportNote(habit, dayOffset);

                    progressList.add(createProgress(user.getId(), habit.getId(), date, value, note));
                }
            }
        }
        return progressList;
    }

    private List<Progress> createStudyProgress(User user, List<Habit> habits) {
        List<Progress> progressList = new ArrayList<>();
        int daysOfActivity = 70;

        for (Habit habit : habits) {
            for (int dayOffset = daysOfActivity; dayOffset >= 0; dayOffset--) {
                LocalDate date = LocalDate.now().minusDays(dayOffset);
                boolean isWeekDay = date.getDayOfWeek().getValue() <= 5;

                // Plus active en semaine
                double consistency = isWeekDay ? 0.85 : 0.4;

                if (random.nextDouble() < consistency) {
                    Double value = generateStudyValue(habit);
                    progressList.add(createProgress(user.getId(), habit.getId(), date, value, null));
                }
            }
        }
        return progressList;
    }

    private List<Progress> createIntermittentProgress(User user, List<Habit> habits) {
        List<Progress> progressList = new ArrayList<>();
        int daysOfActivity = 50;

        for (Habit habit : habits) {
            for (int dayOffset = daysOfActivity; dayOffset >= 0; dayOffset--) {
                // Pattern intermittent : bonnes p√©riodes altern√©es avec abandon
                boolean isInGoodPeriod = ((dayOffset / 10) % 2) == 0;
                double consistency = isInGoodPeriod ? 0.6 : 0.15;

                if (random.nextDouble() < consistency) {
                    Double value = generateBasicValue(habit);
                    progressList.add(createProgress(user.getId(), habit.getId(),
                            LocalDate.now().minusDays(dayOffset), value, null));
                }
            }
        }
        return progressList;
    }

    // === G√âN√âRATEURS DE VALEURS ===

    private Double generateChampionValue(Habit habit, int dayOffset, int totalDays) {
        Double target = habit.getTargetValue();
        if (target == null) return 1.0;

        // Progression dans le temps + variation journali√®re
        double progressFactor = 0.7 + (0.4 * (totalDays - dayOffset) / totalDays);
        double dailyVariation = 0.9 + (random.nextDouble() * 0.3); // ¬±15%

        return Math.round(target * progressFactor * dailyVariation * 10.0) / 10.0;
    }

    private Double generateRegularValue(Habit habit) {
        Double target = habit.getTargetValue();
        if (target == null) return 1.0;

        // 80-110% de l'objectif
        double factor = 0.8 + (random.nextDouble() * 0.3);
        return Math.round(target * factor * 10.0) / 10.0;
    }

    private Double generateNoviceValue(Habit habit, int dayOffset, int totalDays) {
        Double target = habit.getTargetValue();
        if (target == null) return 1.0;

        // Commence √† 30%, progresse vers 80%
        double progressFactor = 0.3 + (0.5 * (totalDays - dayOffset) / totalDays);
        return Math.round(target * progressFactor * 10.0) / 10.0;
    }

    private Double generateSportValue(Habit habit, int dayOffset) {
        Double target = habit.getTargetValue();
        if (target == null) return 1.0;

        // Performance variable avec pics
        boolean isPeakDay = (dayOffset % 14) < 3; // Pics tous les 2 semaines
        double factor = isPeakDay ?
                1.1 + (random.nextDouble() * 0.3) : // Performance √©lev√©e
                0.8 + (random.nextDouble() * 0.4);  // Performance normale

        return Math.round(target * factor * 10.0) / 10.0;
    }

    private Double generateStudyValue(Habit habit) {
        Double target = habit.getTargetValue();
        if (target == null) return 1.0;

        // R√©gulier autour de l'objectif
        double factor = 0.9 + (random.nextDouble() * 0.2);
        return Math.round(target * factor * 10.0) / 10.0;
    }

    private Double generateBasicValue(Habit habit) {
        Double target = habit.getTargetValue();
        if (target == null) return 1.0;

        // Valeurs basiques
        double factor = 0.5 + (random.nextDouble() * 0.5);
        return Math.round(target * factor * 10.0) / 10.0;
    }

    // === G√âN√âRATEURS DE NOTES ===

    private String generateMotivationalNote() {
        String[] notes = {
                "Excellent ! D√©pass√© l'objectif üöÄ",
                "Superbe s√©ance aujourd'hui",
                "Je sens vraiment la progression",
                "Motivation au top !",
                "Nouvelle routine bien int√©gr√©e"
        };
        return notes[random.nextInt(notes.length)];
    }

    private String generateBeginnerNote() {
        String[] notes = {
                "Premi√®re fois que j'y arrive !",
                "C'est dur mais j'y vais",
                "Petit √† petit...",
                "Plus facile qu'hier",
                "Je commence √† prendre le rythme"
        };
        return notes[random.nextInt(notes.length)];
    }

    private String generateSportNote(Habit habit, int dayOffset) {
        if (random.nextDouble() > 0.3) return null; // 30% de chance d'avoir une note

        String[] notes = {
                "PB aujourd'hui ! üí™",
                "Excellente forme",
                "R√©cup√©ration active",
                "Intensit√© maximale",
                "S√©ance parfaite",
                "Nouveau record personnel",
                "Endurance en progr√®s"
        };
        return notes[random.nextInt(notes.length)];
    }

    private Progress createProgress(Long userId, Long habitId, LocalDate date, Double value, String note) {
        Progress progress = new Progress(userId, habitId, date, value);
        if (note != null && random.nextDouble() < 0.4) { // 40% de chance si note fournie
            progress.setNote(note);
        }
        return progress;
    }

    // =====================================================================
    // √âTAPE 4 : CR√âATION D'ACHIEVEMENTS R√âALISTES
    // =====================================================================

    private void createMeaningfulAchievements(List<User> users) {
        log.info("üèÜ Cr√©ation d'achievements r√©alistes...");

        List<Achievement> allAchievements = new ArrayList<>();

        for (User user : users) {
            if (user.getRole() == User.Role.ADMIN || !user.getIsActive()) {
                continue; // Skip admin et inactifs
            }

            List<Achievement> userAchievements = switch (user.getUsername()) {
                case "marie_champion" -> createChampionAchievements(user.getId());
                case "paul_regulier" -> createRegularAchievements(user.getId());
                case "alice_novice" -> createNoviceAchievements(user.getId());
                case "tom_sportif" -> createSportAchievements(user.getId());
                case "emma_studieuse" -> createStudyAchievements(user.getId());
                case "jules_intermittent" -> createBasicAchievements(user.getId());
                default -> new ArrayList<>();
            };

            allAchievements.addAll(userAchievements);
        }

        List<Achievement> savedAchievements = achievementRepository.saveAll(allAchievements);

        log.info("‚úÖ {} achievements cr√©√©s :", savedAchievements.size());
        users.forEach(user -> {
            if (user.getRole() != User.Role.ADMIN && user.getIsActive()) {
                long userAchievementCount = savedAchievements.stream()
                        .filter(a -> a.getUserId().equals(user.getId()))
                        .count();
                log.info("   üèÜ {} : {} achievements", user.getUsername(), userAchievementCount);
            }
        });
    }

    // === PROFILS D'ACHIEVEMENTS ===

    private List<Achievement> createChampionAchievements(Long userId) {
        List<Achievement> achievements = new ArrayList<>();

        // Milestones
        achievements.add(createAchievementWithDate(userId, "Bienvenue ! üéâ",
                "Premier objectif cr√©√©", "üéØ", Achievement.AchievementType.MILESTONE, 140));
        achievements.add(createAchievementWithDate(userId, "Centurion",
                "100 progressions enregistr√©es", "üíØ", Achievement.AchievementType.MILESTONE, 100));
        achievements.add(createAchievementWithDate(userId, "Demi-mill√©naire",
                "500 progressions enregistr√©es", "üåü", Achievement.AchievementType.MILESTONE, 60));
        achievements.add(createAchievementWithDate(userId, "Machine √† Progresser",
                "1000 progressions enregistr√©es", "ü§ñ", Achievement.AchievementType.MILESTONE, 20));

        // Consistency
        achievements.add(createAchievementWithDate(userId, "Semaine parfaite",
                "7 jours cons√©cutifs", "üî•", Achievement.AchievementType.CONSISTENCY, 130));
        achievements.add(createAchievementWithDate(userId, "Mois de l√©gende",
                "30 jours cons√©cutifs", "üèÖ", Achievement.AchievementType.CONSISTENCY, 100));
        achievements.add(createAchievementWithDate(userId, "Trimestre de titan",
                "90 jours cons√©cutifs", "üëë", Achievement.AchievementType.CONSISTENCY, 70));

        // Streak
        achievements.add(createAchievementWithDate(userId, "S√©rie impressionnante",
                "15 jours de suite", "‚ö°", Achievement.AchievementType.STREAK, 120));
        achievements.add(createAchievementWithDate(userId, "Invincible",
                "50 jours de suite", "üõ°Ô∏è", Achievement.AchievementType.STREAK, 80));

        // Overachiever
        achievements.add(createAchievementWithDate(userId, "Surpassement",
                "Objectif d√©pass√© de 50%", "üöÄ", Achievement.AchievementType.OVERACHIEVER, 110));
        achievements.add(createAchievementWithDate(userId, "Perfectionniste",
                "Objectif d√©pass√© 10 fois", "üíé", Achievement.AchievementType.OVERACHIEVER, 90));

        // Variety
        achievements.add(createAchievementWithDate(userId, "Polyvalente",
                "5 cat√©gories diff√©rentes", "üåà", Achievement.AchievementType.VARIETY, 125));
        achievements.add(createAchievementWithDate(userId, "Ma√Ætre de tous",
                "Excellence dans toutes les cat√©gories", "üé≠", Achievement.AchievementType.VARIETY, 50));

        // Dedication
        achievements.add(createAchievementWithDate(userId, "Multi-t√¢ches",
                "8 habitudes actives", "üé™", Achievement.AchievementType.DEDICATION, 115));
        achievements.add(createAchievementWithDate(userId, "Super Woman",
                "Excellence sur tous les fronts", "ü¶∏‚Äç‚ôÄÔ∏è", Achievement.AchievementType.DEDICATION, 40));

        return achievements;
    }

    private List<Achievement> createRegularAchievements(Long userId) {
        List<Achievement> achievements = new ArrayList<>();

        // Basics
        achievements.add(createAchievementWithDate(userId, "Bienvenue ! üéâ",
                "Premier objectif cr√©√©", "üéØ", Achievement.AchievementType.MILESTONE, 80));
        achievements.add(createAchievementWithDate(userId, "Premier pas",
                "Premi√®re progression", "üëü", Achievement.AchievementType.MILESTONE, 79));
        achievements.add(createAchievementWithDate(userId, "Cinquantaine",
                "50 progressions", "üèÅ", Achievement.AchievementType.MILESTONE, 50));

        // Consistency mod√©r√©e
        achievements.add(createAchievementWithDate(userId, "Semaine parfaite",
                "7 jours cons√©cutifs", "üî•", Achievement.AchievementType.CONSISTENCY, 60));
        achievements.add(createAchievementWithDate(userId, "R√©gularit√©",
                "Constance sur 2 semaines", "‚è∞", Achievement.AchievementType.CONSISTENCY, 40));

        // Quelques streaks
        achievements.add(createAchievementWithDate(userId, "S√©rie prometteuse",
                "10 jours de suite", "üìà", Achievement.AchievementType.STREAK, 55));

        // Variety
        achievements.add(createAchievementWithDate(userId, "√âquilibre",
                "3 cat√©gories diff√©rentes", "‚öñÔ∏è", Achievement.AchievementType.VARIETY, 70));

        return achievements;
    }

    private List<Achievement> createNoviceAchievements(Long userId) {
        List<Achievement> achievements = new ArrayList<>();

        // Premiers pas
        achievements.add(createAchievementWithDate(userId, "Bienvenue ! üéâ",
                "Premier objectif cr√©√©", "üéØ", Achievement.AchievementType.MILESTONE, 25));
        achievements.add(createAchievementWithDate(userId, "Premier pas",
                "Premi√®re progression", "üëü", Achievement.AchievementType.MILESTONE, 24));
        achievements.add(createAchievementWithDate(userId, "Dixaine",
                "10 progressions", "üîü", Achievement.AchievementType.MILESTONE, 15));

        // Premi√®res s√©ries
        achievements.add(createAchievementWithDate(userId, "Trois de suite",
                "3 jours cons√©cutifs", "3Ô∏è‚É£", Achievement.AchievementType.STREAK, 20));
        achievements.add(createAchievementWithDate(userId, "Une semaine !",
                "7 jours cons√©cutifs", "üî•", Achievement.AchievementType.CONSISTENCY, 10));

        // Encouragement
        achievements.add(createAchievementWithDate(userId, "Pers√©v√©rance",
                "Continue malgr√© les difficult√©s", "üí™", Achievement.AchievementType.PERSEVERANCE, 18));

        return achievements;
    }

    private List<Achievement> createSportAchievements(Long userId) {
        List<Achievement> achievements = new ArrayList<>();

        // Milestones sportifs
        achievements.add(createAchievementWithDate(userId, "Bienvenue ! üéâ",
                "Premier objectif cr√©√©", "üéØ", Achievement.AchievementType.MILESTONE, 110));
        achievements.add(createAchievementWithDate(userId, "Athl√®te",
                "100 s√©ances d'entra√Ænement", "üèÉ‚Äç‚ôÇÔ∏è", Achievement.AchievementType.MILESTONE, 80));
        achievements.add(createAchievementWithDate(userId, "Machine de guerre",
                "500 progressions sportives", "‚öîÔ∏è", Achievement.AchievementType.MILESTONE, 40));

        // Consistency sportive
        achievements.add(createAchievementWithDate(userId, "Discipline de fer",
                "30 jours cons√©cutifs", "üî•", Achievement.AchievementType.CONSISTENCY, 85));
        achievements.add(createAchievementWithDate(userId, "R√©gularit√© olympique",
                "60 jours cons√©cutifs", "ü•á", Achievement.AchievementType.CONSISTENCY, 60));

        // Performance
        achievements.add(createAchievementWithDate(userId, "Beast Mode",
                "Objectif d√©pass√© de 100%", "ü¶ç", Achievement.AchievementType.OVERACHIEVER, 75));
        achievements.add(createAchievementWithDate(userId, "Record battu",
                "Performance exceptionnelle", "üìä", Achievement.AchievementType.OVERACHIEVER, 50));

        // Dedication sportive
        achievements.add(createAchievementWithDate(userId, "Sportif complet",
                "Excellence multi-sports", "üèÜ", Achievement.AchievementType.DEDICATION, 70));

        // Early bird
        achievements.add(createAchievementWithDate(userId, "L√®ve-t√¥t",
                "Entra√Ænement matinal", "üåÖ", Achievement.AchievementType.EARLY_BIRD, 90));

        return achievements;
    }

    private List<Achievement> createStudyAchievements(Long userId) {
        List<Achievement> achievements = new ArrayList<>();

        // √âducation
        achievements.add(createAchievementWithDate(userId, "Bienvenue ! üéâ",
                "Premier objectif cr√©√©", "üéØ", Achievement.AchievementType.MILESTONE, 70));
        achievements.add(createAchievementWithDate(userId, "√âtudiante mod√®le",
                "50 sessions d'√©tude", "üìö", Achievement.AchievementType.MILESTONE, 50));
        achievements.add(createAchievementWithDate(userId, "Intellectuelle",
                "200 heures d'apprentissage", "üß†", Achievement.AchievementType.MILESTONE, 30));

        // Consistency d'√©tude
        achievements.add(createAchievementWithDate(userId, "Assidue",
                "15 jours cons√©cutifs d'√©tude", "üìñ", Achievement.AchievementType.CONSISTENCY, 55));
        achievements.add(createAchievementWithDate(userId, "Studieuse",
                "Un mois d'apprentissage", "üéì", Achievement.AchievementType.CONSISTENCY, 35));

        // Variety √©ducative
        achievements.add(createAchievementWithDate(userId, "Polyglotte",
                "Apprentissage multi-langues", "üåç", Achievement.AchievementType.VARIETY, 60));
        achievements.add(createAchievementWithDate(userId, "Curieuse",
                "Diversit√© des apprentissages", "üîç", Achievement.AchievementType.VARIETY, 45));

        return achievements;
    }

    private List<Achievement> createBasicAchievements(Long userId) {
        List<Achievement> achievements = new ArrayList<>();

        achievements.add(createAchievementWithDate(userId, "Bienvenue ! üéâ",
                "Premier objectif cr√©√©", "üéØ", Achievement.AchievementType.MILESTONE, 50));
        achievements.add(createAchievementWithDate(userId, "Premier pas",
                "Premi√®re progression", "üëü", Achievement.AchievementType.MILESTONE, 49));
        achievements.add(createAchievementWithDate(userId, "Tentative",
                "3 jours d'efforts", "ü§û", Achievement.AchievementType.STREAK, 40));

        return achievements;
    }

    private Achievement createAchievementWithDate(Long userId, String name, String description,
                                                  String icon, Achievement.AchievementType type, int daysAgo) {
        Achievement achievement = new Achievement(userId, name, description, icon, type);
        LocalDateTime unlockedAt = LocalDateTime.now().minusDays(daysAgo);
        achievement.setUnlockedAt(unlockedAt);
        return achievement;
    }

    // =====================================================================
    // √âTAPE 5 : STATISTIQUES D√âTAILL√âES FINALES
    // =====================================================================

    private void logDetailedStatistics() {
        log.info("üìä === STATISTIQUES D√âTAILL√âES FINALES ===");

        // Stats globales
        long totalUsers = userRepository.count();
        long activeUsers = userRepository.countByIsActive(true);
        long inactiveUsers = userRepository.countByIsActive(false);
        long totalHabits = habitRepository.count();
        long activeHabits = habitRepository.countByIsActive(true);
        long totalProgress = progressRepository.count();
        long totalAchievements = achievementRepository.count();

        log.info("üë• UTILISATEURS :");
        log.info("   Total : {} | Actifs : {} | Inactifs : {}", totalUsers, activeUsers, inactiveUsers);

        log.info("üéØ HABITUDES :");
        log.info("   Total : {} | Actives : {}", totalHabits, activeHabits);

        log.info("üìà PROGRESSIONS : {}", totalProgress);
        log.info("üèÜ ACHIEVEMENTS : {}", totalAchievements);

        // Stats par utilisateur actif
        log.info("\nüìä D√âTAIL PAR UTILISATEUR ACTIF :");
        userRepository.findByIsActive(true, org.springframework.data.domain.Pageable.unpaged())
                .forEach(user -> {
                    if (user.getRole() != User.Role.ADMIN) {
                        long userHabits = habitRepository.countByUserIdAndIsActive(user.getId(), true);
                        long userProgress = progressRepository.countByUserId(user.getId());
                        long userAchievements = achievementRepository.countByUserId(user.getId());
                        long daysSinceJoin = java.time.temporal.ChronoUnit.DAYS.between(
                                user.getCreatedAt().toLocalDate(), LocalDate.now());

                        log.info("   üë§ {} ({}j) : {} hab. | {} prog. | {} badges",
                                user.getUsername(), daysSinceJoin, userHabits, userProgress, userAchievements);
                    }
                });

        // Stats par cat√©gorie d'habitudes
        log.info("\nüè∑Ô∏è R√âPARTITION PAR CAT√âGORIE :");
        for (Habit.Category category : Habit.Category.values()) {
            long count = habitRepository.findAll().stream()
                    .filter(h -> h.getCategory() == category && h.getIsActive())
                    .count();
            if (count > 0) {
                log.info("   {} : {} habitudes", category, count);
            }
        }

        // Stats par type d'achievement
        log.info("\nüèÜ R√âPARTITION ACHIEVEMENTS :");
        for (Achievement.AchievementType type : Achievement.AchievementType.values()) {
            long count = achievementRepository.findAll().stream()
                    .filter(a -> a.getAchievementType() == type)
                    .count();
            if (count > 0) {
                log.info("   {} : {} badges", type, count);
            }
        }

        // Moyennes et insights
        log.info("\nüìä INSIGHTS :");
        if (activeUsers > 0) {
            double avgHabitsPerUser = (double) activeHabits / (activeUsers - 1); // -1 pour exclure admin
            double avgProgressPerUser = (double) totalProgress / (activeUsers - 1);
            double avgAchievementsPerUser = (double) totalAchievements / (activeUsers - 1);

            log.info("   üìà Moyenne par utilisateur actif :");
            log.info("      Habitudes : {}", Math.round(avgHabitsPerUser * 10.0) / 10.0);
            log.info("      Progressions : {}", Math.round(avgProgressPerUser * 10.0) / 10.0);
            log.info("      Achievements : {}", Math.round(avgAchievementsPerUser * 10.0) / 10.0);
        }

        // Utilisateurs les plus actifs
        log.info("\nü•á TOP UTILISATEURS :");
        userRepository.findByIsActive(true, org.springframework.data.domain.Pageable.unpaged())
                .stream()
                .filter(user -> user.getRole() != User.Role.ADMIN)
                .sorted((u1, u2) -> {
                    long progress1 = progressRepository.countByUserId(u1.getId());
                    long progress2 = progressRepository.countByUserId(u2.getId());
                    return Long.compare(progress2, progress1);
                })
                .limit(3)
                .forEach(user -> {
                    long userProgress = progressRepository.countByUserId(user.getId());
                    long userAchievements = achievementRepository.countByUserId(user.getId());
                    log.info("   üèÜ {} : {} progressions, {} achievements",
                            user.getUsername(), userProgress, userAchievements);
                });

        // P√©riode d'activit√©
        LocalDate oldestProgress = progressRepository.findAll().stream()
                .map(Progress::getDate)
                .min(LocalDate::compareTo)
                .orElse(LocalDate.now());

        LocalDate newestProgress = progressRepository.findAll().stream()
                .map(Progress::getDate)
                .max(LocalDate::compareTo)
                .orElse(LocalDate.now());

        long activityPeriodDays = java.time.temporal.ChronoUnit.DAYS.between(oldestProgress, newestProgress);

        log.info("\nüìÖ P√âRIODE D'ACTIVIT√â :");
        log.info("   Du {} au {} ({} jours)", oldestProgress, newestProgress, activityPeriodDays);

        if (activityPeriodDays > 0) {
            double avgProgressPerDay = (double) totalProgress / activityPeriodDays;
            log.info("   Moyenne : {} progressions/jour", Math.round(avgProgressPerDay * 10.0) / 10.0);
        }

        log.info("\nüéØ DONN√âES PR√äTES POUR LES TESTS ! üéØ");
        log.info("================================================");
    }

    // =====================================================================
    // M√âTHODES UTILITAIRES SUPPL√âMENTAIRES
    // =====================================================================

    /**
     * M√©thode pour ajouter encore plus de donn√©es si besoin
     */
    public void addMoreTestData() {
        log.info("üîÑ Ajout de donn√©es suppl√©mentaires...");

        // Ajouter quelques progressions r√©centes pour tous les utilisateurs actifs
        userRepository.findByIsActive(true, org.springframework.data.domain.Pageable.unpaged())
                .forEach(user -> {
                    if (user.getRole() != User.Role.ADMIN) {
                        addRecentProgressForUser(user.getId());
                    }
                });
    }

    /**
     * Ajoute des progressions r√©centes pour un utilisateur
     */
    private void addRecentProgressForUser(Long userId) {
        List<Habit> userHabits = habitRepository.findByUserIdAndIsActive(userId, true);
        List<Progress> recentProgress = new ArrayList<>();

        // Progressions pour les 3 derniers jours
        for (int dayOffset = 2; dayOffset >= 0; dayOffset--) {
            LocalDate date = LocalDate.now().minusDays(dayOffset);

            for (Habit habit : userHabits) {
                // 70% de chance d'avoir une progression
                if (random.nextDouble() < 0.7) {
                    if (!progressRepository.existsByUserIdAndHabitIdAndDate(userId, habit.getId(), date)) {
                        Double value = generateBasicValue(habit);
                        String note = dayOffset == 0 ? "Progression du jour !" : null;

                        recentProgress.add(createProgress(userId, habit.getId(), date, value, note));
                    }
                }
            }
        }

        if (!recentProgress.isEmpty()) {
            progressRepository.saveAll(recentProgress);
            log.info("   ‚ûï {} progressions r√©centes ajout√©es pour user {}",
                    recentProgress.size(), userId);
        }
    }
}