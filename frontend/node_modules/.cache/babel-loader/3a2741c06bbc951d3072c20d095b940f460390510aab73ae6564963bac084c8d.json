{"ast":null,"code":"var _jsxFileName = \"/home/iamyanissa/jp/HabitTracker/frontend/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const isAuthenticated = !!user && !!token;\n\n  // Initialisation au chargement de l'app\n  useEffect(() => {\n    const initAuth = async () => {\n      const storedToken = localStorage.getItem('accessToken');\n      if (storedToken) {\n        try {\n          authService.setToken(storedToken);\n          const userInfo = await authService.getCurrentUser();\n          setUser(userInfo);\n          setToken(storedToken);\n        } catch (error) {\n          console.error('Erreur lors de la vérification du token:', error);\n          // Token invalide, on le supprime\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('refreshToken');\n        }\n      }\n      setIsLoading(false);\n    };\n    initAuth();\n  }, []);\n  const login = async (username, password) => {\n    setIsLoading(true);\n    try {\n      const response = await authService.login({\n        username,\n        password\n      });\n\n      // Stocker les tokens\n      localStorage.setItem('accessToken', response.accessToken);\n      localStorage.setItem('refreshToken', response.refreshToken);\n\n      // Mettre à jour l'état\n      authService.setToken(response.accessToken);\n      setUser(response.user);\n      setToken(response.accessToken);\n    } catch (error) {\n      console.error('Erreur de connexion:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const register = async userData => {\n    setIsLoading(true);\n    try {\n      const response = await authService.register(userData);\n\n      // Stocker les tokens\n      localStorage.setItem('accessToken', response.accessToken);\n      localStorage.setItem('refreshToken', response.refreshToken);\n\n      // Mettre à jour l'état\n      authService.setToken(response.accessToken);\n      setUser(response.user);\n      setToken(response.accessToken);\n    } catch (error) {\n      console.error('Erreur d\\'inscription:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    // Nettoyer le stockage local\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n\n    // Nettoyer l'état\n    authService.removeToken();\n    setUser(null);\n    setToken(null);\n  };\n  const refreshToken = async () => {\n    const storedRefreshToken = localStorage.getItem('refreshToken');\n    if (!storedRefreshToken) {\n      logout();\n      return;\n    }\n    try {\n      const response = await authService.refreshToken(storedRefreshToken);\n\n      // Mettre à jour les tokens\n      localStorage.setItem('accessToken', response.accessToken);\n      localStorage.setItem('refreshToken', response.refreshToken);\n      authService.setToken(response.accessToken);\n      setToken(response.accessToken);\n      setUser(response.user);\n    } catch (error) {\n      console.error('Erreur lors du rafraîchissement du token:', error);\n      logout();\n    }\n  };\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    isLoading,\n    login,\n    register,\n    logout,\n    refreshToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"mX4/AXRUN66G8j/NKXHYWKblzjI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","authService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","isLoading","setIsLoading","isAuthenticated","initAuth","storedToken","localStorage","getItem","userInfo","getCurrentUser","error","console","removeItem","login","username","password","response","setItem","accessToken","refreshToken","register","userData","logout","removeToken","storedRefreshToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/iamyanissa/jp/HabitTracker/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { authService, AuthResponse, User } from '../services/authService';\n\ninterface AuthContextType {\n    user: User | null;\n    token: string | null;\n    isAuthenticated: boolean;\n    isLoading: boolean;\n    login: (username: string, password: string) => Promise<void>;\n    register: (userData: RegisterData) => Promise<void>;\n    logout: () => void;\n    refreshToken: () => Promise<void>;\n}\n\ninterface RegisterData {\n    username: string;\n    email: string;\n    password: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\ninterface AuthProviderProps {\n    children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n    const [user, setUser] = useState<User | null>(null);\n    const [token, setToken] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    const isAuthenticated = !!user && !!token;\n\n    // Initialisation au chargement de l'app\n    useEffect(() => {\n        const initAuth = async () => {\n            const storedToken = localStorage.getItem('accessToken');\n            if (storedToken) {\n                try {\n                    authService.setToken(storedToken);\n                    const userInfo = await authService.getCurrentUser();\n                    setUser(userInfo);\n                    setToken(storedToken);\n                } catch (error) {\n                    console.error('Erreur lors de la vérification du token:', error);\n                    // Token invalide, on le supprime\n                    localStorage.removeItem('accessToken');\n                    localStorage.removeItem('refreshToken');\n                }\n            }\n            setIsLoading(false);\n        };\n\n        initAuth();\n    }, []);\n\n    const login = async (username: string, password: string) => {\n        setIsLoading(true);\n        try {\n            const response: AuthResponse = await authService.login({ username, password });\n\n            // Stocker les tokens\n            localStorage.setItem('accessToken', response.accessToken);\n            localStorage.setItem('refreshToken', response.refreshToken);\n\n            // Mettre à jour l'état\n            authService.setToken(response.accessToken);\n            setUser(response.user);\n            setToken(response.accessToken);\n        } catch (error) {\n            console.error('Erreur de connexion:', error);\n            throw error;\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const register = async (userData: RegisterData) => {\n        setIsLoading(true);\n        try {\n            const response: AuthResponse = await authService.register(userData);\n\n            // Stocker les tokens\n            localStorage.setItem('accessToken', response.accessToken);\n            localStorage.setItem('refreshToken', response.refreshToken);\n\n            // Mettre à jour l'état\n            authService.setToken(response.accessToken);\n            setUser(response.user);\n            setToken(response.accessToken);\n        } catch (error) {\n            console.error('Erreur d\\'inscription:', error);\n            throw error;\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const logout = () => {\n        // Nettoyer le stockage local\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n\n        // Nettoyer l'état\n        authService.removeToken();\n        setUser(null);\n        setToken(null);\n    };\n\n    const refreshToken = async () => {\n        const storedRefreshToken = localStorage.getItem('refreshToken');\n        if (!storedRefreshToken) {\n            logout();\n            return;\n        }\n\n        try {\n            const response = await authService.refreshToken(storedRefreshToken);\n\n            // Mettre à jour les tokens\n            localStorage.setItem('accessToken', response.accessToken);\n            localStorage.setItem('refreshToken', response.refreshToken);\n\n            authService.setToken(response.accessToken);\n            setToken(response.accessToken);\n            setUser(response.user);\n        } catch (error) {\n            console.error('Erreur lors du rafraîchissement du token:', error);\n            logout();\n        }\n    };\n\n    const value: AuthContextType = {\n        user,\n        token,\n        isAuthenticated,\n        isLoading,\n        login,\n        register,\n        logout,\n        refreshToken,\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}