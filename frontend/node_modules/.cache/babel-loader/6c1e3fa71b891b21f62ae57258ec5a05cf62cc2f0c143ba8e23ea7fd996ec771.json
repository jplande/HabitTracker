{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Types\n\nclass AuthService {\n  constructor() {\n    this.api = void 0;\n    this.token = null;\n    this.api = axios.create({\n      baseURL: API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Intercepteur pour ajouter automatiquement le token\n    this.api.interceptors.request.use(config => {\n      if (this.token) {\n        config.headers.Authorization = `Bearer ${this.token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Intercepteur pour gérer les erreurs de token\n    this.api.interceptors.response.use(response => response, async error => {\n      var _error$response;\n      const originalRequest = error.config;\n\n      // Si erreur 401 et pas déjà en cours de retry\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        try {\n          const refreshToken = localStorage.getItem('refreshToken');\n          if (refreshToken) {\n            const response = await this.refreshToken(refreshToken);\n            this.setToken(response.accessToken);\n            localStorage.setItem('accessToken', response.accessToken);\n\n            // Refaire la requête originale avec le nouveau token\n            originalRequest.headers.Authorization = `Bearer ${response.accessToken}`;\n            return this.api(originalRequest);\n          }\n        } catch (refreshError) {\n          // Si le refresh échoue, rediriger vers login\n          this.removeToken();\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('refreshToken');\n          window.location.href = '/login';\n        }\n      }\n      return Promise.reject(error);\n    });\n  }\n  setToken(token) {\n    this.token = token;\n  }\n  removeToken() {\n    this.token = null;\n  }\n  async login(credentials) {\n    try {\n      const response = await this.api.post('/auth/login', credentials);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Erreur de connexion');\n    }\n  }\n  async register(userData) {\n    try {\n      const response = await this.api.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Erreur d\\'inscription');\n    }\n  }\n  async refreshToken(refreshToken) {\n    try {\n      const response = await this.api.post('/auth/refresh', {\n        refreshToken\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error('Erreur lors du rafraîchissement du token');\n    }\n  }\n  async getCurrentUser() {\n    try {\n      const response = await this.api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      throw new Error('Erreur lors de la récupération du profil utilisateur');\n    }\n  }\n  async logout() {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (refreshToken) {\n        await this.api.post('/auth/logout', {\n          refreshToken\n        });\n      }\n    } catch (error) {\n      console.error('Erreur lors de la déconnexion:', error);\n    } finally {\n      this.removeToken();\n    }\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","AuthService","constructor","api","token","create","baseURL","headers","interceptors","request","use","config","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","localStorage","getItem","setToken","accessToken","setItem","refreshError","removeToken","removeItem","window","location","href","login","credentials","post","data","_error$response2","_error$response2$data","Error","message","register","userData","_error$response3","_error$response3$data","getCurrentUser","get","logout","console","authService"],"sources":["/home/iamyanissa/jp/HabitTracker/frontend/src/services/authService.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Types\nexport interface User {\n    id: number;\n    username: string;\n    email: string;\n    firstName?: string;\n    lastName?: string;\n    role: 'USER' | 'ADMIN';\n    createdAt: string;\n}\n\nexport interface AuthResponse {\n    accessToken: string;\n    refreshToken: string;\n    tokenType: string;\n    expiresIn: number;\n    user: User;\n}\n\nexport interface LoginRequest {\n    username: string;\n    password: string;\n}\n\nexport interface RegisterRequest {\n    username: string;\n    email: string;\n    password: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nclass AuthService {\n    private api: AxiosInstance;\n    private token: string | null = null;\n\n    constructor() {\n        this.api = axios.create({\n            baseURL: API_BASE_URL,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        // Intercepteur pour ajouter automatiquement le token\n        this.api.interceptors.request.use(\n            (config) => {\n                if (this.token) {\n                    config.headers.Authorization = `Bearer ${this.token}`;\n                }\n                return config;\n            },\n            (error) => {\n                return Promise.reject(error);\n            }\n        );\n\n        // Intercepteur pour gérer les erreurs de token\n        this.api.interceptors.response.use(\n            (response) => response,\n            async (error) => {\n                const originalRequest = error.config;\n\n                // Si erreur 401 et pas déjà en cours de retry\n                if (error.response?.status === 401 && !originalRequest._retry) {\n                    originalRequest._retry = true;\n\n                    try {\n                        const refreshToken = localStorage.getItem('refreshToken');\n                        if (refreshToken) {\n                            const response = await this.refreshToken(refreshToken);\n                            this.setToken(response.accessToken);\n                            localStorage.setItem('accessToken', response.accessToken);\n\n                            // Refaire la requête originale avec le nouveau token\n                            originalRequest.headers.Authorization = `Bearer ${response.accessToken}`;\n                            return this.api(originalRequest);\n                        }\n                    } catch (refreshError) {\n                        // Si le refresh échoue, rediriger vers login\n                        this.removeToken();\n                        localStorage.removeItem('accessToken');\n                        localStorage.removeItem('refreshToken');\n                        window.location.href = '/login';\n                    }\n                }\n\n                return Promise.reject(error);\n            }\n        );\n    }\n\n    setToken(token: string) {\n        this.token = token;\n    }\n\n    removeToken() {\n        this.token = null;\n    }\n\n    async login(credentials: LoginRequest): Promise<AuthResponse> {\n        try {\n            const response = await this.api.post('/auth/login', credentials);\n            return response.data;\n        } catch (error: any) {\n            throw new Error(error.response?.data?.message || 'Erreur de connexion');\n        }\n    }\n\n    async register(userData: RegisterRequest): Promise<AuthResponse> {\n        try {\n            const response = await this.api.post('/auth/register', userData);\n            return response.data;\n        } catch (error: any) {\n            throw new Error(error.response?.data?.message || 'Erreur d\\'inscription');\n        }\n    }\n\n    async refreshToken(refreshToken: string): Promise<AuthResponse> {\n        try {\n            const response = await this.api.post('/auth/refresh', {\n                refreshToken,\n            });\n            return response.data;\n        } catch (error: any) {\n            throw new Error('Erreur lors du rafraîchissement du token');\n        }\n    }\n\n    async getCurrentUser(): Promise<User> {\n        try {\n            const response = await this.api.get('/auth/me');\n            return response.data;\n        } catch (error: any) {\n            throw new Error('Erreur lors de la récupération du profil utilisateur');\n        }\n    }\n\n    async logout(): Promise<void> {\n        try {\n            const refreshToken = localStorage.getItem('refreshToken');\n            if (refreshToken) {\n                await this.api.post('/auth/logout', { refreshToken });\n            }\n        } catch (error) {\n            console.error('Erreur lors de la déconnexion:', error);\n        } finally {\n            this.removeToken();\n        }\n    }\n}\n\nexport const authService = new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}